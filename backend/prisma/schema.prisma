// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum HabitFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum HabitStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks     Task[]
  habits    Habit[]
  analytics AnalyticsEntry[]

  @@map("users")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  category    String?
  tags        String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Habit {
  id          String        @id @default(cuid())
  name        String
  description String?
  frequency   HabitFrequency @default(DAILY)
  targetValue Float?
  unit        String?
  status      HabitStatus   @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId  String
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries HabitEntry[]

  @@map("habits")
}

model HabitEntry {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  value     Float?
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@map("habit_entries")
}

model AnalyticsEntry {
  id                String   @id @default(cuid())
  date              DateTime @db.Date
  tasksCompleted    Int      @default(0)
  habitsCompleted   Int      @default(0)
  productivityScore Float?
  timeSpent         Int?     // in minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("analytics_entries")
}
